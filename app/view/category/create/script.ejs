<script>
  (async () => {
    const category_create_form = await categoryCreateForm();

    const category_types = await API.response(CategoryType.filter, {});
    category_types.forEach(category_type => {
      category_create_form.type.append(lib.element.create("option", { value: category_type.id }, category_type.name));
    });

    document.getElementById("category-create-box").append(category_create_form);

    category_create_form.scope_min.addEventListener("blur", async e => {
      e.preventDefault();

      scopeMinBlur(e.target.value, e.target, e.target.parentNode.parentNode.scope_max);
    });

    category_create_form.scope_max.addEventListener("blur", async e => {
      e.preventDefault();

      scopeMaxBlur(e.target.value, e.target, e.target.parentNode.parentNode.scope_min);
    });

    category_create_form.type.addEventListener("change", async e => {
      e.preventDefault();

      let scope_min = e.target.parentNode.parentNode.scope_min;
      let scope_max = e.target.parentNode.parentNode.scope_max;

      setCategoryScope(e.target.value, scope_min, scope_max);
    });

    category_create_form.addEventListener("submit", async e => {
      e.preventDefault();

      let category = {
        id: e.target.id.value || null,
        name: e.target.name.value || null,
        type: e.target.type.value || null,
        scope: ''
      };

      if (category.type != "text") {
        if (lib.isValidNumber(e.target.scope_min.value) && lib.isValidNumber(e.target.scope_max.value)) {
          category.scope = `${e.target.scope_min.value}-${e.target.scope_max.value}`;
        }
      }

      let response = await API.response(Category.save, category);
      if (!response) { return false; }

      lib.message(response.done);

      e.target.id.value = "";
      e.target.name.value = "";
      e.target.type.value = "";
      e.target.scope_min.value = "";
      e.target.scope_max.value = "";

      lib.addCss(e.target.submit, ['b1']);
      lib.removeCss(e.target.submit, ['b2']);

      lib.display("category-cancel-btn", "none");

      e.target.submit.innerHTML = "Cadastrar categoria";

      document.getElementById("category-filter-form").submit.click();
    });

    document.getElementById('category-create-form').name.focus();
  })();

  function scopeMinBlur(target_value, scope_min, scope_max) {
    if (lib.isValidNumber(target_value)) {
      if (scope_max.value < target_value) {
        scope_max.value = target_value;
      }
      scope_max.min = target_value;
    }
  };

  function scopeMaxBlur(target_value, scope_max, scope_min) {
    if (lib.isValidNumber(target_value)) {
      if (scope_min.value > target_value) {
        scope_min.value = target_value;
      }
      scope_min.max = target_value;
    }
  };

  function setCategoryScope(select_value, scope_min, scope_max) {
    scope_min.value = "";
    scope_max.value = "";

    if (select_value == "text") {
      lib.display("scope_div", "none");
    } else if (select_value == "int") {
      lib.display('scope_div', '');

      scope_min.step = '1';
      scope_max.step = '1';
    } else {
      lib.display('scope_div', '');

      let scope = lib.splitTextBy(select_value, '-')[1];
      let step = '0.'
      for (let i = 1; i <= scope; i++) {
        if (i != scope) { step += `0`; }
        else { step += `1` }
      };

      scope_min.step = step;
      scope_max.step = step;
    }
  }

  const categoryEdit = async (category_id) => {
    let category = await API.response(Category.filter, { id: category_id });
    if (!category) { return false; }

    const category_form = document.getElementById("category-create-form");

    category_form.id.value = category[0].id;
    category_form.name.value = category[0].name;
    category_form.type.value = category[0].type;
    category_form.name.focus();

    setCategoryScope(category_form.type.value, category_form.scope_min, category_form.scope_max);

    if (category[0].scope) {
      category_form.scope_min.value = lib.splitTextBy(category[0].scope, '-')[0];
      category_form.scope_max.value = lib.splitTextBy(category[0].scope, '-')[1];
    }

    category_form.submit.innerHTML = "Atualizar";

    lib.addCss(category_form.submit, ['b2']);
    lib.removeCss(category_form.submit, ['b1']);

    lib.display("category-cancel-btn", "");

    lib.display("category-detail-box", 'none');
  };

  const categoryDelete = async (category_id) => {
    let r = confirm('Deseja realmente excluir a variação?');
    if (r) {
      if (!await API.response(Category.delete, category_id)) { return false; };
      document.getElementById("category-filter-form").submit.click();
    }
  };

  const categoryUpdateCancel = (e) => {
    document.getElementById("category-create-form").id.value = "";
    document.getElementById("category-create-form").name.value = "";

    lib.addCss(document.getElementById("category-create-form").submit, ['b1']);
    lib.removeCss(document.getElementById("category-create-form").submit, ['b2']);

    lib.display("category-cancel-btn", "none");

    document.getElementById("category-create-form").submit.innerHTML = "Cadastrar categoria";
  };
</script>